
#Grammer

Goal->(Statement;)*
Statement -> Define | Equation | Loop | If
Define -> int ID(, ID)* | int ID(, ID)* = Expr(, Expr)*
Operator -> -= | += | *= | \= | =
Equation -> ID Operator Expr 
Expr -> Term((+|-)Term)*
Term -> Factor((*|/|%)Factor)*
Factor -> Final((^)Final)*
Final -> ID | Num | "("Expr")"
ID -> [a-z A-Z]+
Num -> 0 | [1-9]([0-9])* | -[1-9]([0-9])*
If -> if C : Begin (Equation)* end ((Elif)* | Else)
Elif -> elif C : Begin (Equation)* end
Else -> else C : Begin (Equation)* end
C -> Condition ((and | or) Condition)*
Condition -> Expr CompOparator Expr
CompOparator -> (<= | >= | == | != | > | <) 
Loop -> loopc C : Begin (Equation)* end